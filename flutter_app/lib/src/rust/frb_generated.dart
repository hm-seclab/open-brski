// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bootstrapper.dart';
import 'api/config.dart';
import 'api/ffiblecommunicator.dart';
import 'api/identifiers.dart';
import 'api/init.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => -5018394;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_flutter_app',
    ioDirectory: '../crates/flutter_bridge/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiBootstrapperBootstrapperBootstrap(
      {required Bootstrapper that, required String serialNumber});

  Future<Bootstrapper> crateApiBootstrapperBootstrapperInit(
      {required ParsedConfig config, required FfibleCommunicator communicator});

  Future<ParsedConfig> crateApiConfigGetConfig(
      {required String eeCert,
      required String eeKey,
      required String registrarCert});

  Future<FfibleCommunicator>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderBuild(
          {required FFIBLECommunicatorBuilder that});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderInit();

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetCaCertsFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetDataInterchangeFormatFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<String> Function(DiscoveredPledge) callback});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetEnrollResponseFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPerFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPledgeInfoFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(
                  DiscoveredPledge, DataInterchangeFormat)
              callback});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPvrFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback});

  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetVoucherFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback});

  Future<Identifier> crateApiIdentifiersBleIdentifiersGetCaCerts(
      {required BleIdentifiers that});

  Future<Identifier> crateApiIdentifiersBleIdentifiersGetEnrollResponse(
      {required BleIdentifiers that});

  Future<Identifier> crateApiIdentifiersBleIdentifiersGetTper(
      {required BleIdentifiers that});

  Future<Identifier> crateApiIdentifiersBleIdentifiersGetTpvr(
      {required BleIdentifiers that});

  Future<Identifier> crateApiIdentifiersBleIdentifiersGetVoucher(
      {required BleIdentifiers that});

  Future<BleIdentifiers> crateApiIdentifiersBleIdentifiersNew();

  Future<BleIdentifiers> crateApiIdentifiersGetIdentifiers();

  Future<String> crateApiIdentifiersIdentifierGetReadUuid(
      {required Identifier that});

  Future<String> crateApiIdentifiersIdentifierGetUuid(
      {required Identifier that});

  Future<String> crateApiIdentifiersIdentifierGetWriteUuid(
      {required Identifier that});

  Future<void> crateApiInitInitApp();

  Stream<String> crateApiInitSetupLogs();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Bootstrapper;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Bootstrapper;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BootstrapperPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataInterchangeFormat;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataInterchangeFormat;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DataInterchangeFormatPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DiscoveredPledge;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DiscoveredPledge;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DiscoveredPledgePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfibleCommunicator;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfibleCommunicator;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FfibleCommunicatorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ParsedConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ParsedConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ParsedConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PledgeCtx;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PledgeCtx;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PledgeCtxPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiBootstrapperBootstrapperBootstrap(
      {required Bootstrapper that, required String serialNumber}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
            that, serializer);
        sse_encode_String(serialNumber, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiBootstrapperBootstrapperBootstrapConstMeta,
      argValues: [that, serialNumber],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBootstrapperBootstrapperBootstrapConstMeta =>
      const TaskConstMeta(
        debugName: "Bootstrapper_bootstrap",
        argNames: ["that", "serialNumber"],
      );

  @override
  Future<Bootstrapper> crateApiBootstrapperBootstrapperInit(
      {required ParsedConfig config,
      required FfibleCommunicator communicator}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
            config, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
            communicator, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBootstrapperBootstrapperInitConstMeta,
      argValues: [config, communicator],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBootstrapperBootstrapperInitConstMeta =>
      const TaskConstMeta(
        debugName: "Bootstrapper_init",
        argNames: ["config", "communicator"],
      );

  @override
  Future<ParsedConfig> crateApiConfigGetConfig(
      {required String eeCert,
      required String eeKey,
      required String registrarCert}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(eeCert, serializer);
        sse_encode_String(eeKey, serializer);
        sse_encode_String(registrarCert, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiConfigGetConfigConstMeta,
      argValues: [eeCert, eeKey, registrarCert],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiConfigGetConfigConstMeta => const TaskConstMeta(
        debugName: "get_config",
        argNames: ["eeCert", "eeKey", "registrarCert"],
      );

  @override
  Future<FfibleCommunicator>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderBuild(
          {required FFIBLECommunicatorBuilder that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderBuildConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderBuildConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_build",
            argNames: ["that"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderInit() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderInitConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderInitConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_init",
            argNames: [],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetCaCertsFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetCaCertsFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetCaCertsFfiConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_set_ca_certs_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetDataInterchangeFormatFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<String> Function(DiscoveredPledge) callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Output_String_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetDataInterchangeFormatFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetDataInterchangeFormatFfiConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffible_communicator_builder_set_data_interchange_format_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetEnrollResponseFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetEnrollResponseFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetEnrollResponseFfiConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_set_enroll_response_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPerFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPerFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPerFfiConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_set_per_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPledgeInfoFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(
                  DiscoveredPledge, DataInterchangeFormat)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat_Output_list_prim_u_8_strict_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPledgeInfoFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPledgeInfoFfiConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_set_pledge_info_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPvrFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPvrFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetPvrFfiConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_set_pvr_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<FFIBLECommunicatorBuilder>
      crateApiFfiblecommunicatorFfibleCommunicatorBuilderSetVoucherFfi(
          {required FFIBLECommunicatorBuilder that,
          required FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
              callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ffible_communicator_builder(that, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffible_communicator_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetVoucherFfiConstMeta,
      argValues: [that, callback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiFfiblecommunicatorFfibleCommunicatorBuilderSetVoucherFfiConstMeta =>
          const TaskConstMeta(
            debugName: "ffible_communicator_builder_set_voucher_ffi",
            argNames: ["that", "callback"],
          );

  @override
  Future<Identifier> crateApiIdentifiersBleIdentifiersGetCaCerts(
      {required BleIdentifiers that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ble_identifiers(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersBleIdentifiersGetCaCertsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersBleIdentifiersGetCaCertsConstMeta =>
      const TaskConstMeta(
        debugName: "ble_identifiers_get_ca_certs",
        argNames: ["that"],
      );

  @override
  Future<Identifier> crateApiIdentifiersBleIdentifiersGetEnrollResponse(
      {required BleIdentifiers that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ble_identifiers(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersBleIdentifiersGetEnrollResponseConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiIdentifiersBleIdentifiersGetEnrollResponseConstMeta =>
          const TaskConstMeta(
            debugName: "ble_identifiers_get_enroll_response",
            argNames: ["that"],
          );

  @override
  Future<Identifier> crateApiIdentifiersBleIdentifiersGetTper(
      {required BleIdentifiers that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ble_identifiers(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersBleIdentifiersGetTperConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersBleIdentifiersGetTperConstMeta =>
      const TaskConstMeta(
        debugName: "ble_identifiers_get_tper",
        argNames: ["that"],
      );

  @override
  Future<Identifier> crateApiIdentifiersBleIdentifiersGetTpvr(
      {required BleIdentifiers that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ble_identifiers(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersBleIdentifiersGetTpvrConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersBleIdentifiersGetTpvrConstMeta =>
      const TaskConstMeta(
        debugName: "ble_identifiers_get_tpvr",
        argNames: ["that"],
      );

  @override
  Future<Identifier> crateApiIdentifiersBleIdentifiersGetVoucher(
      {required BleIdentifiers that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_ble_identifiers(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersBleIdentifiersGetVoucherConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersBleIdentifiersGetVoucherConstMeta =>
      const TaskConstMeta(
        debugName: "ble_identifiers_get_voucher",
        argNames: ["that"],
      );

  @override
  Future<BleIdentifiers> crateApiIdentifiersBleIdentifiersNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ble_identifiers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersBleIdentifiersNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersBleIdentifiersNewConstMeta =>
      const TaskConstMeta(
        debugName: "ble_identifiers_new",
        argNames: [],
      );

  @override
  Future<BleIdentifiers> crateApiIdentifiersGetIdentifiers() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ble_identifiers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersGetIdentifiersConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersGetIdentifiersConstMeta =>
      const TaskConstMeta(
        debugName: "get_identifiers",
        argNames: [],
      );

  @override
  Future<String> crateApiIdentifiersIdentifierGetReadUuid(
      {required Identifier that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_identifier(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersIdentifierGetReadUuidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersIdentifierGetReadUuidConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_get_read_uuid",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiIdentifiersIdentifierGetUuid(
      {required Identifier that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_identifier(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersIdentifierGetUuidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersIdentifierGetUuidConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_get_uuid",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiIdentifiersIdentifierGetWriteUuid(
      {required Identifier that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_identifier(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiIdentifiersIdentifierGetWriteUuidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIdentifiersIdentifierGetWriteUuidConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_get_write_uuid",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Stream<String> crateApiInitSetupLogs() {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiInitSetupLogsConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiInitSetupLogsConstMeta => const TaskConstMeta(
        debugName: "setup_logs",
        argNames: ["sink"],
      );

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat_Output_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List> Function(DiscoveredPledge, DataInterchangeFormat)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
              rawArg0);
      final arg1 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
              rawArg1);

      Box<Uint8List>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_list_prim_u_8_strict(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Output_String_AnyhowException(
          FutureOr<String> Function(DiscoveredPledge) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
              rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List> Function(Uint8List, PledgeCtx) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);
      final arg1 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
              rawArg1);

      Box<Uint8List>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_list_prim_u_8_strict(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureString =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureString =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8 =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8 =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8 =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8 =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Bootstrapper => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Bootstrapper => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataInterchangeFormat => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataInterchangeFormat => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DiscoveredPledge => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DiscoveredPledge => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfibleCommunicator => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfibleCommunicator => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ParsedConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ParsedConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PledgeCtx => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PledgeCtx => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Bootstrapper
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BootstrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DataInterchangeFormat
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataInterchangeFormatImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveredPledge
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveredPledgeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfibleCommunicator
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfibleCommunicatorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ParsedConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParsedConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PledgeCtx
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PledgeCtxImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<Uint8List> Function(DiscoveredPledge, DataInterchangeFormat)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat_Output_list_prim_u_8_strict_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<String> Function(DiscoveredPledge)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Uint8List> Function(Uint8List, PledgeCtx)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl
        .frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Bootstrapper
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BootstrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DataInterchangeFormat
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataInterchangeFormatImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DiscoveredPledge
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DiscoveredPledgeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfibleCommunicator
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfibleCommunicatorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ParsedConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParsedConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PledgeCtx
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PledgeCtxImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BleIdentifiers dco_decode_ble_identifiers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BleIdentifiers(
      tpvr: dco_decode_identifier(arr[0]),
      tper: dco_decode_identifier(arr[1]),
      voucher: dco_decode_identifier(arr[2]),
      caCerts: dco_decode_identifier(arr[3]),
      enrollResponse: dco_decode_identifier(arr[4]),
    );
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
        raw);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
        raw);
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        raw);
  }

  @protected
  BleIdentifiers dco_decode_box_autoadd_ble_identifiers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ble_identifiers(raw);
  }

  @protected
  FFIBLECommunicatorBuilder dco_decode_box_autoadd_ffible_communicator_builder(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffible_communicator_builder(raw);
  }

  @protected
  Identifier dco_decode_box_autoadd_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_identifier(raw);
  }

  @protected
  FFIBLECommunicatorBuilder dco_decode_ffible_communicator_builder(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return FFIBLECommunicatorBuilder(
      ffiSendPvrTrigger:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
              arr[0]),
      ffiSendPerTrigger:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
              arr[1]),
      ffiSendVoucher:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
              arr[2]),
      ffiSendCaCerts:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
              arr[3]),
      ffiSendEnrollResponse:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
              arr[4]),
      ffiGetDataInterchangeFormat:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
              arr[5]),
      ffiGetPledgeInfo:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
              arr[6]),
    );
  }

  @protected
  Identifier dco_decode_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Identifier(
      uuid: dco_decode_String(arr[0]),
      readUuid: dco_decode_String(arr[1]),
      writeUuid: dco_decode_String(arr[2]),
    );
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
            raw);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
            raw);
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
            raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Bootstrapper
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BootstrapperImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataInterchangeFormat
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataInterchangeFormatImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveredPledge
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveredPledgeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfibleCommunicator
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfibleCommunicatorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ParsedConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParsedConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PledgeCtx
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PledgeCtxImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl
        .frbInternalSseDecode(
            sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Bootstrapper
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BootstrapperImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataInterchangeFormat
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataInterchangeFormatImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DiscoveredPledge
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DiscoveredPledgeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfibleCommunicator
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfibleCommunicatorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ParsedConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParsedConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PledgeCtx
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PledgeCtxImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BleIdentifiers sse_decode_ble_identifiers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tpvr = sse_decode_identifier(deserializer);
    var var_tper = sse_decode_identifier(deserializer);
    var var_voucher = sse_decode_identifier(deserializer);
    var var_caCerts = sse_decode_identifier(deserializer);
    var var_enrollResponse = sse_decode_identifier(deserializer);
    return BleIdentifiers(
        tpvr: var_tpvr,
        tper: var_tper,
        voucher: var_voucher,
        caCerts: var_caCerts,
        enrollResponse: var_enrollResponse);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
        deserializer));
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
        deserializer));
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        deserializer));
  }

  @protected
  BleIdentifiers sse_decode_box_autoadd_ble_identifiers(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ble_identifiers(deserializer));
  }

  @protected
  FFIBLECommunicatorBuilder sse_decode_box_autoadd_ffible_communicator_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffible_communicator_builder(deserializer));
  }

  @protected
  Identifier sse_decode_box_autoadd_identifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_identifier(deserializer));
  }

  @protected
  FFIBLECommunicatorBuilder sse_decode_ffible_communicator_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ffiSendPvrTrigger =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
            deserializer);
    var var_ffiSendPerTrigger =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
            deserializer);
    var var_ffiSendVoucher =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
            deserializer);
    var var_ffiSendCaCerts =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
            deserializer);
    var var_ffiSendEnrollResponse =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
            deserializer);
    var var_ffiGetDataInterchangeFormat =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
            deserializer);
    var var_ffiGetPledgeInfo =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
            deserializer);
    return FFIBLECommunicatorBuilder(
        ffiSendPvrTrigger: var_ffiSendPvrTrigger,
        ffiSendPerTrigger: var_ffiSendPerTrigger,
        ffiSendVoucher: var_ffiSendVoucher,
        ffiSendCaCerts: var_ffiSendCaCerts,
        ffiSendEnrollResponse: var_ffiSendEnrollResponse,
        ffiGetDataInterchangeFormat: var_ffiGetDataInterchangeFormat,
        ffiGetPledgeInfo: var_ffiGetPledgeInfo);
  }

  @protected
  Identifier sse_decode_identifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uuid = sse_decode_String(deserializer);
    var var_readUuid = sse_decode_String(deserializer);
    var var_writeUuid = sse_decode_String(deserializer);
    return Identifier(
        uuid: var_uuid, readUuid: var_readUuid, writeUuid: var_writeUuid);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  ArcBoxFnDiscoveredPledgeDartFnFutureString?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          ArcBoxFnDiscoveredPledgeDartFnFutureString self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8 self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8 self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
          Bootstrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BootstrapperImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
          DataInterchangeFormat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataInterchangeFormatImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
          DiscoveredPledge self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveredPledgeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
          FfibleCommunicator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfibleCommunicatorImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
          ParsedConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ParsedConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
          PledgeCtx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PledgeCtxImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat_Output_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List> Function(DiscoveredPledge, DataInterchangeFormat)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat_Output_list_prim_u_8_strict_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Output_String_AnyhowException(
          FutureOr<String> Function(DiscoveredPledge) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge_Output_String_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List> Function(Uint8List, PledgeCtx) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx_Output_list_prim_u_8_strict_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          ArcBoxFnDiscoveredPledgeDartFnFutureString self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8 self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8 self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBootstrapper(
          Bootstrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BootstrapperImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataInterchangeFormat(
          DataInterchangeFormat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataInterchangeFormatImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDiscoveredPledge(
          DiscoveredPledge self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DiscoveredPledgeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFFIBLECommunicator(
          FfibleCommunicator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfibleCommunicatorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParsedConfig(
          ParsedConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ParsedConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPledgeCtx(
          PledgeCtx self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PledgeCtxImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_ble_identifiers(
      BleIdentifiers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_identifier(self.tpvr, serializer);
    sse_encode_identifier(self.tper, serializer);
    sse_encode_identifier(self.voucher, serializer);
    sse_encode_identifier(self.caCerts, serializer);
    sse_encode_identifier(self.enrollResponse, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          ArcBoxFnDiscoveredPledgeDartFnFutureString self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8 self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8 self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ble_identifiers(
      BleIdentifiers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ble_identifiers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffible_communicator_builder(
      FFIBLECommunicatorBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffible_communicator_builder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_identifier(
      Identifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_identifier(self, serializer);
  }

  @protected
  void sse_encode_ffible_communicator_builder(
      FFIBLECommunicatorBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        self.ffiSendPvrTrigger, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        self.ffiSendPerTrigger, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        self.ffiSendVoucher, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        self.ffiSendCaCerts, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
        self.ffiSendEnrollResponse, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
        self.ffiGetDataInterchangeFormat, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
        self.ffiGetPledgeInfo, serializer);
  }

  @protected
  void sse_encode_identifier(Identifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.readUuid, serializer);
    sse_encode_String(self.writeUuid, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          ArcBoxFnDiscoveredPledgeDartFnFutureString? self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDartFnFutureStringSyncSend(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8? self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecu8SyncSend(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8? self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcBoxdynFnVecu8PledgeCtxDartFnFutureVecu8SyncSend(
          self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl extends RustOpaque
    implements ArcBoxFnDiscoveredPledgeDartFnFutureString {
  // Not to be used by end users
  ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcBoxFnDiscoveredPledgeDartFnFutureStringImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureString,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureString,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDartFnFutureStringPtr,
  );
}

@sealed
class ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl
    extends RustOpaque
    implements ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8 {
  // Not to be used by end users
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Impl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcBoxFnDiscoveredPledgeDataInterchangeFormatDartFnFutureVecU8Ptr,
  );
}

@sealed
class ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl extends RustOpaque
    implements ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8 {
  // Not to be used by end users
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Impl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcBoxFnVecU8PledgeCtxDartFnFutureVecU8Ptr,
  );
}

@sealed
class BootstrapperImpl extends RustOpaque implements Bootstrapper {
  // Not to be used by end users
  BootstrapperImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BootstrapperImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Bootstrapper,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Bootstrapper,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BootstrapperPtr,
  );

  Future<void> bootstrap({required String serialNumber}) =>
      RustLib.instance.api.crateApiBootstrapperBootstrapperBootstrap(
          that: this, serialNumber: serialNumber);
}

@sealed
class DataInterchangeFormatImpl extends RustOpaque
    implements DataInterchangeFormat {
  // Not to be used by end users
  DataInterchangeFormatImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DataInterchangeFormatImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DataInterchangeFormat,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DataInterchangeFormat,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DataInterchangeFormatPtr,
  );
}

@sealed
class DiscoveredPledgeImpl extends RustOpaque implements DiscoveredPledge {
  // Not to be used by end users
  DiscoveredPledgeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DiscoveredPledgeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DiscoveredPledge,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DiscoveredPledge,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DiscoveredPledgePtr,
  );
}

@sealed
class FfibleCommunicatorImpl extends RustOpaque implements FfibleCommunicator {
  // Not to be used by end users
  FfibleCommunicatorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfibleCommunicatorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FfibleCommunicator,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FfibleCommunicator,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_FfibleCommunicatorPtr,
  );
}

@sealed
class ParsedConfigImpl extends RustOpaque implements ParsedConfig {
  // Not to be used by end users
  ParsedConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ParsedConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ParsedConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParsedConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParsedConfigPtr,
  );
}

@sealed
class PledgeCtxImpl extends RustOpaque implements PledgeCtx {
  // Not to be used by end users
  PledgeCtxImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PledgeCtxImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PledgeCtx,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PledgeCtx,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PledgeCtxPtr,
  );
}
